name: Release CI
on:
  push:
    branches:
      - 'release/**'

env:
  AWS_REGION: ap-northeast-2
  ECR_REGISTRY: 525896778658.dkr.ecr.ap-northeast-2.amazonaws.com/hhplus-dev
  ECR_REPOSITORY: hhplus-dev

jobs:
  build-and-test:
    runs-on: ubuntu-latest # 최신 Ubuntu 가상 환경에서 실행

    services:
      redis:
        image: redis
        ports:
          - 6379:6379 # Redis의 6379 포트를 가상 머신의 6379 포트에 매핑
      postgres:
        image: postgres
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # 데이터베이스의 상태를 확인하는 명령어 및 상태 확인 옵션
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/testdb'

    steps:
      - uses: actions/checkout@v2 # 워크플로가 실행되는 현재 레포지토리 코드를 가져옴

      - name: Set up Node.js
        uses: actions/setup-node@v2 # Node.js 환경 설정
        with:
          node-version: '16'

      - name: Cache node modules # 노드 모듈을 캐시하여 종속성 설치를 위한 시간을 줄이기 위한 작업.
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }} # 파일이 변경될 때 해시를 무효화 할 수 있도록 함.
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: npm install

      - name: Run Prisma Migrations
        run: npx prisma migrate deploy

      - name: Run lint
        run: npm run lint

      - name: Run prettier check
        run: npm run format

      - name: Run tests with coverage
        run: npm run test:cov

  release-cd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login AWS ECR service
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push dev-image to Amazon ECR
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}:${{ env.ECR_REPOSITORY }}-dev .
          docker push ${{ env.ECR_REGISTRY }}:${{ env.ECR_REPOSITORY }}-dev
